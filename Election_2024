module VotingSystem::SecureElection {
    use 0x1::Signer;
    use 0x1::Vector;
    use 0x1::String;
    use 0x1::Address;
    use 0x1::Event;

    const JOE_BIDEN: u8 = 1;
    const DONALD_TRUMP: u8 = 2;
    const ROBERT_KENNEDY_JR: u8 = 3;

    struct Election {
        admin: address,
        voters: vector<address>,
        votes: vector<u8>,
        has_voted: vector<bool>,
        tally: vector<u64>,
        end_time: u64,
    }

    struct VoteEvent has key {
        voter: address,
        candidate: u8,
    }

    public fun create_election(admin: &signer, duration: u64): address {
        let admin_addr = Signer::address_of(admin);
        let voters = Vector::empty<address>();
        let votes = Vector::empty<u8>();
        let has_voted = Vector::empty<bool>();
        let tally = Vector::empty<u64>();

        Vector::push_back(&mut tally, 0); // For Joe Biden
        Vector::push_back(&mut tally, 0); // For Donald Trump
        Vector::push_back(&mut tally, 0); // For Robert Kennedy Jr

        let election = Election {
            admin: admin_addr,
            voters,
            votes,
            has_voted,
            tally,
            end_time: Timestamp::now() + duration,
        };

        let election_addr = Address::create();
        Address::publish(election_addr, election);
        election_addr
    }

    public fun register_voter(election_addr: address, voter: &signer) {
        let election = &mut BorrowGlobalMut<Election>(election_addr);
        let voter_addr = Signer::address_of(voter);
        assert!(!Vector::contains(&election.voters, voter_addr), 1001); // Voter already registered

        Vector::push_back(&mut election.voters, voter_addr);
        Vector::push_back(&mut election.has_voted, false);
    }

    public fun vote(election_addr: address, voter: &signer, candidate: u8) {
        let election = &mut BorrowGlobalMut<Election>(election_addr);
        let voter_addr = Signer::address_of(voter);
        let idx = Vector::index_of(&election.voters, voter_addr);

        assert!(idx.is_some(), 1002); // Voter not registered
        assert!(!Vector::borrow(&election.has_voted, idx), 1003); // Voter already voted
        assert!(Timestamp::now() < election.end_time, 1004); // Voting period ended

        Vector::push_back(&mut election.votes, candidate);
        *Vector::borrow_mut(&mut election.has_voted, idx) = true;

        match candidate {
            JOE_BIDEN => Vector::borrow_mut(&mut election.tally, 0) += 1,
            DONALD_TRUMP => Vector::borrow_mut(&mut election.tally, 1) += 1,
            ROBERT_KENNEDY_JR => Vector::borrow_mut(&mut election.tally, 2) += 1,
            _ => abort(1005), // Invalid candidate
        };

        Event::emit<VoteEvent>(VoteEvent { voter: voter_addr, candidate });
    }

    public fun tally_votes(election_addr: address): vector<u64> {
        let election = &BorrowGlobal<Election>(election_addr);
        election.tally
    }

    public fun get_results(election_addr: address): (u64, u64, u64) {
        let election = &BorrowGlobal<Election>(election_addr);
        (
            Vector::borrow(&election.tally, 0),
            Vector::borrow(&election.tally, 1),
            Vector::borrow(&election.tally, 2),
        )
    }
}
