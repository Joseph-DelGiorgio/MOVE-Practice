module deepbook_liquidity_provider::liquidity_provider {
    use sui::object::{Self, UID};
    use sui::transfer;
    use sui::tx_context::{Self, TxContext};
    use sui::coin::{Self, Coin};
    use sui::balance::{Self, Balance};
    use deepbook::clob::{Self, Pool};
    use deepbook::custodian::{Self, Account};

    // Errors
    const E_INSUFFICIENT_BALANCE: u64 = 0;
    const E_INVALID_AMOUNT: u64 = 1;

    // Structs
    struct LiquidityProvider has key {
        id: UID,
        base_balance: Balance<SUI>,
        quote_balance: Balance<USDC>,
        account: Account
    }

    // Events
    struct LiquidityAdded has copy, drop {
        provider: address,
        base_amount: u64,
        quote_amount: u64
    }

    struct LiquidityRemoved has copy, drop {
        provider: address,
        base_amount: u64,
        quote_amount: u64
    }

    // Functions
    public fun create_liquidity_provider(ctx: &mut TxContext) {
        let sender = tx_context::sender(ctx);
        let account = custodian::create_account(ctx);
        
        let liquidity_provider = LiquidityProvider {
            id: object::new(ctx),
            base_balance: balance::zero<SUI>(),
            quote_balance: balance::zero<USDC>(),
            account
        };

        transfer::transfer(liquidity_provider, sender);
    }

    public fun add_liquidity(
        provider: &mut LiquidityProvider,
        pool: &mut Pool<SUI, USDC>,
        base_coin: Coin<SUI>,
        quote_coin: Coin<USDC>,
        ctx: &mut TxContext
    ) {
        let base_amount = coin::value(&base_coin);
        let quote_amount = coin::value(&quote_coin);

        assert!(base_amount > 0 && quote_amount > 0, E_INVALID_AMOUNT);

        let base_balance = coin::into_balance(base_coin);
        let quote_balance = coin::into_balance(quote_coin);

        balance::join(&mut provider.base_balance, base_balance);
        balance::join(&mut provider.quote_balance, quote_balance);

        clob::deposit_base(pool, &mut provider.account, base_amount, ctx);
        clob::deposit_quote(pool, &mut provider.account, quote_amount, ctx);

        // Place limit orders
        let base_price = clob::get_mid_price(pool);
        let spread = 0.001; // 0.1% spread
        
        clob::place_limit_order(
            pool,
            &mut provider.account,
            true, // is_bid
            base_amount / 2,
            (base_price * (1 - spread)) as u64,
            0, // expire_timestamp
            0, // restriction
            ctx
        );

        clob::place_limit_order(
            pool,
            &mut provider.account,
            false, // is_bid
            base_amount / 2,
            (base_price * (1 + spread)) as u64,
            0, // expire_timestamp
            0, // restriction
            ctx
        );

        // Emit event
        sui::event::emit(LiquidityAdded {
            provider: tx_context::sender(ctx),
            base_amount,
            quote_amount
        });
    }

    public fun remove_liquidity(
        provider: &mut LiquidityProvider,
        pool: &mut Pool<SUI, USDC>,
        base_amount: u64,
        quote_amount: u64,
        ctx: &mut TxContext
    ): (Coin<SUI>, Coin<USDC>) {
        assert!(base_amount <= balance::value(&provider.base_balance), E_INSUFFICIENT_BALANCE);
        assert!(quote_amount <= balance::value(&provider.quote_balance), E_INSUFFICIENT_BALANCE);

        // Cancel all open orders
        clob::cancel_all_orders(pool, &mut provider.account, ctx);

        // Withdraw from DeepBook
        clob::withdraw_base(pool, &mut provider.account, base_amount, ctx);
        clob::withdraw_quote(pool, &mut provider.account, quote_amount, ctx);

        let base_coin = coin::from_balance(balance::split(&mut provider.base_balance, base_amount), ctx);
        let quote_coin = coin::from_balance(balance::split(&mut provider.quote_balance, quote_amount), ctx);

        // Emit event
        sui::event::emit(LiquidityRemoved {
            provider: tx_context::sender(ctx),
            base_amount,
            quote_amount
        });

        (base_coin, quote_coin)
    }

    public fun rebalance(
        provider: &mut LiquidityProvider,
        pool: &mut Pool<SUI, USDC>,
        ctx: &mut TxContext
    ) {
        // Cancel all existing orders
        clob::cancel_all_orders(pool, &mut provider.account, ctx);

        // Get current balances
        let base_balance = clob::get_base_available(pool, &provider.account);
        let quote_balance = clob::get_quote_available(pool, &provider.account);

        // Calculate target balances (50/50 split)
        let total_value = base_balance + (quote_balance / clob::get_mid_price(pool) as u64);
        let target_balance = total_value / 2;

        // Rebalance if necessary
        if base_balance > target_balance {
            let amount_to_sell = base_balance - target_balance;
            clob::place_market_order(
                pool,
                &mut provider.account,
                false, // is_bid
                amount_to_sell,
                0, // restriction
                ctx
            );
        } else if base_balance < target_balance {
            let amount_to_buy = target_balance - base_balance;
            clob::place_market_order(
                pool,
                &mut provider.account,
                true, // is_bid
                amount_to_buy,
                0, // restriction
                ctx
            );
        };

        // Place new limit orders
        let new_base_balance = clob::get_base_available(pool, &provider.account);
        let base_price = clob::get_mid_price(pool);
        let spread = 0.001; // 0.1% spread

        clob::place_limit_order(
            pool,
            &mut provider.account,
            true, // is_bid
            new_base_balance / 2,
            (base_price * (1 - spread)) as u64,
            0, // expire_timestamp
            0, // restriction
            ctx
        );

        clob::place_limit_order(
            pool,
            &mut provider.account,
            false, // is_bid
            new_base_balance / 2,
            (base_price * (1 + spread)) as u64,
            0, // expire_timestamp
            0, // restriction
            ctx
        );
    }
}
